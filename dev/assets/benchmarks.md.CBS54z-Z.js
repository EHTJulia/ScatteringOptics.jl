import{_ as d,C as l,c as s,o as n,ai as a,G as o,j as t,w as r,a as i}from"./chunks/framework.jNnwUIMM.js";const c="/ScatteringOptics.jl/dev/assets/bench_kernel_speed.CfCP8P3k.png",m="/ScatteringOptics.jl/dev/assets/bench_full_scattering.CQTmu7Cr.png",g="/ScatteringOptics.jl/dev/assets/bench_kernel_accuracy.DEf3022g.png",F=JSON.parse('{"title":"Benchmarks","description":"","frontmatter":{},"headers":[],"relativePath":"benchmarks.md","filePath":"benchmarks.md","lastUpdated":null}'),u={name:"benchmarks.md"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},b={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.495ex",height:"2.005ex",role:"img",focusable:"false",viewBox:"0 -864 1986.7 886","aria-hidden":"true"},f={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},y={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.495ex",height:"2.02ex",role:"img",focusable:"false",viewBox:"0 -871.1 1986.7 893.1","aria-hidden":"true"};function T(v,e,x,w,_,Q){const h=l("PluginTabsTab"),p=l("PluginTabs");return n(),s("div",null,[e[10]||(e[10]=a(`<h1 id="benchmarks" tabindex="-1">Benchmarks <a class="header-anchor" href="#benchmarks" aria-label="Permalink to &quot;Benchmarks&quot;">​</a></h1><p>The Julia implementation of the EHT scattering framework takes advantage of Julia&#39;s fast Auto-Differentiation (AD) capabilities, which accelerate the simulation of interstellar scattering. As the overall imaging process can consist of thousands to tens of thousands of iterations in order to optimize scattering parameters and the final output image, even a small improvements in simulation speed can result in significant cuts in runtime. It is then crucial that our implementation performs faster than the existing python framework, <code>eht-imaging</code>, and produces consistent results. Here, we present benchmarks between the two implementations.</p><p>All the examples are in <code>examples/benchmarks</code> directories. In below, benchmark results were obtained under the following enviroment.</p><ul><li><p>Ubuntu 22.04 LTS</p></li><li><p>Intel(R) Core(TM) i7-5820K CPU @ 3.30GHz</p></li><li><p>Julia Version 1.10.6</p></li><li><p>ScatteringOptics v0.1.6</p></li><li><p>Python 3.11 (installed through mamba/miniforge3)</p></li><li><p>eht-imaging v1.2.8</p></li></ul><p>You can set up your own enviroment by</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># this command will use mamba command. You can instead use conda command by editing the script.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> setup_python.bash</span></span></code></pre></div><p>or alternatively you can reproduce the enviroment tested by</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># you can replace mamba with conda</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mamba</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> py311_sobenchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conda_list.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or alternatively</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mamba</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> py311_sobenchmark</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> conta_explicit_env.txt</span></span></code></pre></div><p>Then you can run all the tests by</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run_benchmark.bash</span></span></code></pre></div><p>It will take about an hour.</p><h2 id="Model-initialization" tabindex="-1">Model initialization <a class="header-anchor" href="#Model-initialization" aria-label="Permalink to &quot;Model initialization {#Model-initialization}&quot;">​</a></h2><p>Both <code>eht-imaging</code> and <code>ScatteringOptics.jl</code> solves semi-analytic equations to precompute constants (e.g. concentration parameter) required for the phase structure function and other related functions, for the given input scattering parameters. For the future implementation of the joint inference for the scattering parameters, it is important that the model initialization is fast enough for a large number of iterations.</p><table tabindex="0"><thead><tr><th style="text-align:right;">Package</th><th style="text-align:right;">Dipole (Default)</th><th style="text-align:right;">von Mises</th><th style="text-align:right;">Periodic BoxCar</th></tr></thead><tbody><tr><td style="text-align:right;">ScatteringOptics.jl</td><td style="text-align:right;">0.26 +/- 0.15 ms</td><td style="text-align:right;">0.17 +/- 0.08 ms</td><td style="text-align:right;">0.51 +/- 0.11 ms</td></tr><tr><td style="text-align:right;">eht-imaging (Python)</td><td style="text-align:right;">22.86 +/- 1.53 ms</td><td style="text-align:right;">15.99 +/- 1.58 ms</td><td style="text-align:right;">149.24 +/- 6.79 ms</td></tr></tbody></table><p>This shows <code>ScatteringOptics.jl</code> gives about 90-100 times speed boost for Dipole and von Mises models, and 300 times speed boost for the Periodic Boxcar model. The benchmark scripts are available in <code>examples/0_model_initialization</code>, and can be executed with</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run both python and julia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run.bash</span></span></code></pre></div><p>With this significant speed up, the Julia implementation paves the pathway for the joint modeling of scattering parameters and reconstructed images in self-consistent way.</p><h2 id="Scattering-kernel-computations" tabindex="-1">Scattering kernel computations <a class="header-anchor" href="#Scattering-kernel-computations" aria-label="Permalink to &quot;Scattering kernel computations {#Scattering-kernel-computations}&quot;">​</a></h2><p>The scattering kernel may be called upon to compute visibilities for a given sample of Fourier space points (see <a href="/ScatteringOptics.jl/dev/diffractive#Simulate-Diffractive-Scattering">Simulate Diffractive Scattering</a> for the tutorial), which is important to mitigate the diffractive scattering in the sky model (e.g. image) reconstruction. Once the scattering model is initialzied, the kernel visbility can be computed in fairly simple analytic formula that can be purely written by basic numpy operations in Python without a significant overhead. Therefore, one wouldn&#39;t anticipate a significant speed improvement in Julia.</p><p>In these computations, however, <code>ScatteringOptics.jl</code> also exhibits speed improvements up to about 30 times over the three included models (Dipole, Boxcar, and Von Mises; see <a href="/ScatteringOptics.jl/dev/nondefaultmodels#Use-Non-default-Models">Use Non-default Models</a> for more info) in particular for data less than 1k points where typical EHT data sets are. As anticipated, <code>ScatteringOptics.jl</code> and <code>eht-imaging</code> will get closer for larger data sets where overhead contributions are ignoreable.</p><p><img src="`+c+`" alt=""></p><p>The benchmark scripts are available in <code>examples/1_scattering_kernel_speed</code>, and can be executed with</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run both python and julia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run.bash</span></span></code></pre></div><p>This particular comparison is made for a similar level of the low-level functions in a single thread. Comrade.jl&#39;s ecosystem further offers multi-threading of computations through <code>visibilitymap!</code> and related methods to be used in a higher-level modeling/imaging functions if needed, which allows further accerelation.</p><h2 id="End-to-end-scattering-simulations" tabindex="-1">End-to-end scattering simulations <a class="header-anchor" href="#End-to-end-scattering-simulations" aria-label="Permalink to &quot;End-to-end scattering simulations {#End-to-end-scattering-simulations}&quot;">​</a></h2><p><code>ScatteringOptics.jl</code> offers a significant speed up for the end-to-end process as well. Here we compare diffractive scattering of the image that will create an ensemble average image (using <code>ensembleaverage</code> method; see <a href="/ScatteringOptics.jl/dev/diffractive#Simulate-Diffractive-Scattering">Simulate Diffractive Scattering</a>) and also full (i.e. diffractive+refractive) scattering that will create an average image (using <code>scatter_image</code> method; see <a href="/ScatteringOptics.jl/dev/refractive#Simulate-Refractive-Scattering">Simulate Refractive Scattering</a>).</p>`,26)),o(p,null,{default:r(()=>[o(h,{label:"Dipole Model "},{default:r(()=>e[0]||(e[0]=[t("p",null,[t("img",{src:m,alt:""})],-1)])),_:1})]),_:1}),e[11]||(e[11]=a(`<p>Although both methods are not the fastest way for iterative procedures given overheads (and not the best way to use Julia&#39;s speed), you can see that they still offer around 10 times speed up compared to the corresponding methods in <code>eht-imaging</code>. The benchmark scripts are available in <code>examples/2_full_scattering</code>, and can be executed with</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run both python and julia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run.bash</span></span></code></pre></div><h2 id="Consistency-of-the-scattering-kernel" tabindex="-1">Consistency of the scattering kernel <a class="header-anchor" href="#Consistency-of-the-scattering-kernel" aria-label="Permalink to &quot;Consistency of the scattering kernel {#Consistency-of-the-scattering-kernel}&quot;">​</a></h2>`,3)),t("p",null,[e[5]||(e[5]=i("Our scattering kernel produces visibilities that are consistent with those computed by ")),e[6]||(e[6]=t("code",null,"eht-imaging",-1)),e[7]||(e[7]=i(" across all 3 kernel models as well as the range of standard observing wavelengths in radio astronomy. Below, we demonstrate this by plotting the Dipole kernel over the Fourier space major and minor axis for both the Julia and Python implementations in one plot per observing wavelength. The lines completely overlap, indicating complete consistency in results. All fractional errors between the two implementations range on the order of ")),t("mjx-container",k,[(n(),s("svg",b,e[1]||(e[1]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)]))),e[2]||(e[2]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"10"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"−"),t("mn",null,"6")])])])],-1))]),e[8]||(e[8]=i(" and ")),t("mjx-container",f,[(n(),s("svg",y,e[3]||(e[3]=[a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)" style="stroke-width:3;"></path></g><g data-mml-node="TeXAtom" transform="translate(1033,393.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" style="stroke-width:3;"></path></g></g></g></g></g>',1)]))),e[4]||(e[4]=t("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"10"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mo",null,"−"),t("mn",null,"7")])])])],-1))]),e[9]||(e[9]=i(", which is well under scattering kernel uncertainty limits."))]),e[12]||(e[12]=a('<p><img src="'+g+`" alt=""></p><p>The benchmark scripts are available in <code>examples/3_scattering_kernel_consistency</code>, and can be executed with</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># run both python and julia</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run.bash</span></span></code></pre></div>`,3))])}const S=d(u,[["render",T]]);export{F as __pageData,S as default};
